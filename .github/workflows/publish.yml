name: publish

on:
  push:
    branches: 
     - 'master'
     - 'develop'
     - 'release/*'
     - 'feature/*'
     - 'fix/*'

jobs:
  build:

    runs-on: self-hosted
    environment: CommonEnv
    
    env:
      GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      REPO_URL: ${{github.repositoryUrl}}

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET Core SDK 7
      uses: actions/setup-dotnet@v4.3.1
      with:
        dotnet-version: '7.0.x'
    - name: Restore .Net
      run: dotnet restore src
    - name: Configure version
      run: |
        git fetch --unshallow
        CURRENT_TAG_VERSION=$(git tag --points-at HEAD)
        echo $CURRENT_TAG_VERSION
        if [ -z "$CURRENT_TAG_VERSION" ]
        then
        git remote set-url origin https://$GITHUB_TOKEN@${REPO_URL:6}
        CURRENT_TAG_VERSION=$(python3 getVersion.py ./VERSION $ARA_BUILD_DATA_PATH/buildVersionV1.txt)
        git tag $CURRENT_TAG_VERSION
        git push origin --tags
        fi
        sed -i -e "s/\(<Version>\)\(.*\)\(<\/Version>\)/\1$CURRENT_TAG_VERSION\3/" src/AsyncReactAwait/AsyncReactAwait.csproj
        echo "newVersion=$CURRENT_TAG_VERSION"
        echo "newVersion=$CURRENT_TAG_VERSION" >> $GITHUB_ENV
    - name: Test
      run: dotnet test src --verbosity normal
    - name: Build
      run: dotnet build src/AsyncReactAwait/AsyncReactAwait.csproj --no-dependencies --output src/build
    - name: Publish package to GitHub
      if: github.ref == 'refs/heads/master'
      run: |
       dotnet nuget push src/build/*.nupkg --api-key ${{secrets.PAT_TOKEN}} --source github
    - name: Publish package to Nuget
      if: github.ref == 'refs/heads/master'
      run: |
       dotnet nuget push src/build/*.nupkg --api-key ${{secrets.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json
    - name: Zip build
      run: zip AsyncReactAwait.zip src/build/AsyncReactAwait.dll src/build/AsyncReactAwait.xml
    - name: Tag non-release
      if: github.ref != 'refs/heads/master'
      run: |
        lastTag=$(git describe --tags --abbrev=0)
        currentTag=$(git tag --contains)
        if [ "$lastTag" != "$currentTag" ]
        then
          echo "New tag ${{ env.newVersion }}"
          git tag ${{ env.newVersion }}
          git push --tags
        fi
    - name: Create Release
      uses: ncipollo/release-action@v1.16.0
      with:
        tag: ${{ env.newVersion }}
        name: Release ${{ env.newVersion }}
        artifacts: "src/build/*.nupkg, AsyncReactAwait.zip"
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Expose as artifact
      uses: actions/upload-artifact@v4.6.2
      with:
       name: Build
       path: src/build
